import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

group 'dev.josemc.essentials'
version pluginVersion

repositories {
    mavenCentral()

    // PaperMC Repo
    maven { url = "https://repo.papermc.io/repository/maven-public/" }

    // JitPack
    maven { url = 'https://jitpack.io' }
}

dependencies {
    // PaperMC
    compileOnly("io.papermc.paper:paper-api:${mcVersion}-${paperApi}")

    // BoostedYaml
    implementation("dev.dejvokep:boosted-yaml:${boostedYamlVersion}")

    // Lamp Command Framework
    implementation("com.github.Revxrsal.Lamp:common:${lampVersion}")
    implementation("com.github.Revxrsal.Lamp:bukkit:${lampVersion}")

    // MiniMessage & Adventure
    implementation("net.kyori:adventure-text-minimessage:${minimessageVersion}")
    implementation("net.kyori:adventure-platform-bukkit:${adventureVersion}")

    // Reflections
    implementation("org.reflections:reflections:${reflectionsVersion}")
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: pluginVersion]
    }
}

shadowJar {
    relocate("revxrsal.commands", "dev.josemc.essentials.libs.lamp")
    relocate("org.intellij", "dev.josemc.essentials.libs.intellij")
    relocate("org.jetbrains", "dev.josemc.essentials.libs.jetbrains")
    relocate("dev.dejvokep.boostedyaml", "dev.josemc.essentials.libs.boostedyaml")
    relocate("net.kyori", "dev.josemc.essentials.libs.kyori")
    relocate("javassist", "dev.josemc.essentials.libs.javassist")
    relocate("javax", "dev.josemc.essentials.libs.javax")
    relocate("org.reflections", "dev.josemc.essentials.libs.reflections")
    relocate("org.slf4j", "dev.josemc.essentials.libs.slf4j")

}

tasks.register('testJar', Copy) {
    group = "test"
    description = "Create a jar with all dependencies and move into a TestServer"
    dependsOn(':clean')
    from shadowJar
    into(project.file("./TestServer/plugins"))
}
